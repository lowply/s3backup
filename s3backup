#!/bin/bash

#/
#/ s3backup - backup directories to Amazon S3
#/ 
#/ Prerequirements: aws-cli, jq
#/ Author: @lowply
#/ Config location: ~/.config/s3backup.json
#/ Log location:    ~/.log/s3backup
#/ Subcommands:
#/ 
#/ - sync : Do sync
#/ - test : Dry run
#/ - clean: Remove all backups
#/ - size : Total size of the backup
#/
#/ Visit https://github.com/lowply/s3backup to see config example.
#/ 

export PATH=${PATH}:/usr/local/bin

CONF="${HOME}/.config/s3backup.json"

logfile(){
	LOGDIR="${HOME}/.log/$(basename $0)"
	LOGFILE="${LOGDIR}/$(date +%y%m%d).log"
	[ -d ${LOGDIR} ] || mkdir -p ${LOGDIR}
	[ -f ${LOGFILE} ] || touch ${LOGFILE}
	echo ${LOGFILE}
}

logger(){
	LOGFILE=$(logfile)
	echo "$(date): [Info] ${1}" | tee -a ${LOGFILE}
}

logger_error(){
	LOGFILE=$(logfile)
	echo "$(date): [Error] ${1}" | tee -a ${LOGFILE} 1>&2 
	exit 1
}

has(){
	type ${1} >/dev/null 2>&1 && return 0 || { echo "Command not found: ${1}" 1>&2; return 1; }
}

abort(){
	echo "$(date): $@" 1>&2
	exit 1
}

check_file(){
	[ -f ${1} ] && return 0 || { echo "No such file: ${1}" 1>&2; return 1; }
}

usage() {
	grep '^#/' < ${0} | cut -c4-
	exit 1
}

jqr(){
	jq -r "${1}" ${CONF}
}

check_value(){
	if [ "$(jqr ${1})" == "null" ]; then
		logger_error "${1} is null"
		return 1
	fi

	if [ -z "$(jqr ${1})" ]; then
		logger_error "${1} is empty"
		return 1
	fi

	return 0
}

check_conf(){
	if [ -f ${1} ]; then

		jq '.' ${1} > /dev/null
		[ $? -ne 0 ] && { echo "Error parsing config: ${1}" 1>&2; return 1; }

		check_value ".enabled"
		check_value ".exclude"
		check_value ".profile"
		check_value ".bucket"
		check_value ".dir"
		check_value ".node"

		[ $? -ne 0 ] && { echo "Wrong config" 1>&2; return 1; }

		return 0
	else
		[ -d ${HOME}/.config ] || mkdir ${HOME}/.config
		cat <<- EOL | jq --tab '.' > ${1}
			{
				"wifi_allow": [
					"Wifi SSID"
				],
				"enabled": true,
				"profile": "aws_profile",
				"bucket": "aws_bucket",
				"dir": "directory_in_bucket",
				"node":"your_host_name",
				"exclude":[
					"file_or_directory_to_exclude_globally"
				],
				"targets": [
					{
						"path":"/path/to/directory_A",
						"exclude":[
							"file_or_directory_to_exclude"
						]
					},
					{
						"path":"/path/to/directory_B",
						"exclude":[
							"file_or_directory_to_exclude"
						]
					}
				]
			}
		EOL
		echo "Config ${1} is generated, please update it." 1>&2
		return 1
	fi
}

check_wifi(){
	local WIFI_DEV_NAME=$(networksetup -listallhardwareports | grep -w Wi-Fi -A1 | awk '/^Device:/{ print $2 }')
	[ -z "${WIFI_DEV_NAME}" ] && abort "Wi-Fi device not found!"

	local AP="$(networksetup -getairportnetwork ${WIFI_DEV_NAME})"
	[ ! -z "$(echo ${AP} | grep "You are not associated with an AirPort network.")" ] && abort "Wi-Fi is not enabled."

	local CURRENT_WIFI="$(echo ${AP} | sed -e 's/Current Wi-Fi Network: //g')"
	[ -z "${CURRENT_WIFI}" ] && abort "Current Wi-Fi is empty!"

	while read W
	do
		[ "${CURRENT_WIFI}" == "${W}" ] && return 0
	done <<- EOF
		$(jqr '.wifi_allow[]')
	EOF

	abort "Current WiFi: ${CURRENT_WIFI} is not allowed."
}

sync(){
	case "${OSTYPE}" in
	darwin*)
		check_wifi
		;;
	esac

	local ENABLED=$(jqr '.enabled')
	local PROFILE=$(jqr '.profile')
	local TARGETS=$(jqr '.targets[] | .path')
	local BUCKET=$(jqr '.bucket')
	local BACKUPDIR=$(jqr '.dir')
	local NODE=$(jqr '.node')
	local GEXCLUDES=$(jq ".exclude[]" ${CONF})
	local BASIC_OPTS="--profile ${PROFILE} --storage-class STANDARD_IA --no-follow-symlinks --delete"
	
	[ "${ENABLED}" != "true" ] && { echo "Backup is disabled." 1>&2; return 1; }

	_IFS=${IFS}
	IFS=$'\n'
	for GEXCLUDE in ${GEXCLUDES}; do
		local BASIC_OPTS="${BASIC_OPTS} --exclude ${GEXCLUDE}"
	done

	for TARGET in ${TARGETS}; do
		# Not using jqr because I need no-raw output here:
		local EXCLUDES=$(jq ".targets[] | select(.path == \"${TARGET}\") .exclude[]" ${CONF})
		local OPTS=${BASIC_OPTS}

		for EXCLUDE in ${EXCLUDES}; do
			local OPTS="${OPTS} --exclude ${EXCLUDE}"
		done

		if [ "${1}" == "test" ]; then
			CMD="aws s3 sync ${OPTS} --dryrun \"${TARGET}/\" \"s3://${BUCKET}/${BACKUPDIR}/${NODE}${TARGET}/\""
			echo "${CMD}"
		else
			logger "Starting backup for ${TARGET}..."
			logger "aws s3 sync ${OPTS} ${TARGET}/ s3://${BUCKET}/${BACKUPDIR}/${NODE}${TARGET}/"
			CMD="aws s3 sync ${OPTS} \"${TARGET}/\" \"s3://${BUCKET}/${BACKUPDIR}/${NODE}${TARGET}/\" | tee -a $(logfile)"
		fi
		eval "${CMD}"
	done
	IFS=${_IFS}

	return 0
}

clean(){
	local PROFILE=$(jqr '.profile')
	local BUCKET=$(jqr '.bucket')
	local BACKUPDIR=$(jqr '.dir')
	local NODE=$(jqr '.node')
	logger "Removing backup for ${TARGET}..."
	CMD="aws s3 --profile ${PROFILE} rm --recursive s3://${BUCKET}/${BACKUPDIR}/${NODE}/ | tee -a $(logfile)"
	logger "${CMD}"
	eval "${CMD}"
}

size(){
	local PROFILE=$(jqr '.profile')
	local BUCKET=$(jqr '.bucket')
	local CLASS="StandardIAStorage"
	local YESTERDAY=$(date --date 'today -14 day' --iso-8601=seconds | sed -e 's/\+.*$//')
	local TODAY=$(date --date 'today' --iso-8601=seconds | sed -e 's/\+.*$//')

	local DATA=$(
		aws --profile ${PROFILE} cloudwatch \
			get-metric-statistics \
			--namespace AWS/S3 \
			--metric-name BucketSizeBytes \
			--statistics Maximum \
			--start-time ${YESTERDAY} \
			--end-time ${TODAY} \
			--period 86400 \
			--dimensions \
			Name=BucketName,Value=${BUCKET} \
			Name=StorageType,Value=${CLASS} \
			--query 'sort_by(Datapoints[].{
				Time:Timestamp,
				Value:Maximum
			},&Time)'
	)
	echo "Bucket usage for the past 7 days:"
	for V in $(echo ${DATA} | jq -c .[])
	do
		local DT=$(echo ${V} | jq -r .Time)
		local GB=$(echo ${V} | jq -r .Value | numfmt --to=iec --suffix=B --padding=7)
		echo "    ${DT}: ${GB}"
	done
}

main(){
	# check jq command
	has jq
	[ $? -ne 0 ] && exit 1

	# check aws command
	has aws
	[ $? -ne 0 ] && exit 1

	# check aws config file
	check_file "${HOME}/.aws/config"
	[ $? -ne 0 ] && exit 1

	# for multibyte filenames
	export LANG=en_US.UTF-8

	check_conf ${CONF}
	[ $? -ne 0 ] && exit 1

	HANDLER="${1}"
	shift

	case ${HANDLER} in
		"sync")
			sync
			# oneliner will return 1 in launchctl
			if [ $? -ne 0 ]; then
				exit 1
			fi
		;;
		"test")
			sync test
		;;
		"clean")
			clean
		;;
		"size")
			size
		;;
		*)
			usage
		;;
	esac
}

main $@
